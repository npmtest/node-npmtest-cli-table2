{"/home/travis/build/npmtest/node-npmtest-cli-table2/test.js":"/* istanbul instrument in package npmtest_cli_table2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cli-table2/lib.npmtest_cli_table2.js":"/* istanbul instrument in package npmtest_cli_table2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cli_table2 = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cli_table2 = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cli-table2/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cli-table2 && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cli_table2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cli_table2\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cli_table2.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cli_table2.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cli_table2.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cli_table2.__dirname + '/lib.npmtest_cli_table2.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cli-table2/node_modules/cli-table2/index.js":"module.exports = require('./src/table');","/home/travis/build/npmtest/node-npmtest-cli-table2/node_modules/cli-table2/src/table.js":"\nvar utils = require('./utils');\nvar tableLayout = require('./layout-manager');\nvar _ = require('lodash');\n\nfunction Table(options){\n  this.options = utils.mergeOptions(options);\n}\n\nTable.prototype.__proto__ = Array.prototype;\n\nTable.prototype.toString = function(){\n  var array = this;\n  var headersPresent = this.options.head && this.options.head.length;\n  if(headersPresent){\n    array = [this.options.head];\n    if(this.length){\n      array.push.apply(array,this);\n    }\n  }\n  else {\n    this.options.style.head=[];\n  }\n\n  var cells = tableLayout.makeTableLayout(array);\n\n  _.forEach(cells,function(row){\n    _.forEach(row,function(cell){\n      cell.mergeTableOptions(this.options,cells);\n    },this);\n  },this);\n\n  tableLayout.computeWidths(this.options.colWidths,cells);\n  tableLayout.computeHeights(this.options.rowHeights,cells);\n\n  _.forEach(cells,function(row,rowIndex){\n    _.forEach(row,function(cell,cellIndex){\n      cell.init(this.options);\n    },this);\n  },this);\n\n  var result = [];\n\n  for(var rowIndex = 0; rowIndex < cells.length; rowIndex++){\n    var row = cells[rowIndex];\n    var heightOfRow = this.options.rowHeights[rowIndex];\n\n    if(rowIndex === 0 || !this.options.style.compact || (rowIndex == 1 && headersPresent)){\n      doDraw(row,'top',result);\n    }\n\n    for(var lineNum = 0; lineNum < heightOfRow; lineNum++){\n      doDraw(row,lineNum,result);\n    }\n\n    if(rowIndex + 1 == cells.length){\n      doDraw(row,'bottom',result);\n    }\n  }\n\n  return result.join('\\n');\n};\n\nfunction doDraw(row,lineNum,result){\n  var line = [];\n  _.forEach(row,function(cell){\n    line.push(cell.draw(lineNum));\n  });\n  var str = line.join('');\n  if(str.length) result.push(str);\n}\n\nTable.prototype.__defineGetter__('width', function (){\n  var str = this.toString().split(\"\\n\");\n  return str[0].length;\n});\n\nmodule.exports = Table;","/home/travis/build/npmtest/node-npmtest-cli-table2/node_modules/cli-table2/src/utils.js":"var _ = require('lodash');\nvar stringWidth = require('string-width');\n\nfunction codeRegex(capture){\n  return capture ? /\\u001b\\[((?:\\d*;){0,5}\\d*)m/g : /\\u001b\\[(?:\\d*;){0,5}\\d*m/g\n}\n\nfunction strlen(str){\n  var code = codeRegex();\n  var stripped = (\"\" + str).replace(code,'');\n  var split = stripped.split(\"\\n\");\n  return split.reduce(function (memo, s) { return (stringWidth(s) > memo) ? stringWidth(s) : memo }, 0);\n}\n\nfunction repeat(str,times){\n  return Array(times + 1).join(str);\n}\n\nfunction pad(str, len, pad, dir) {\n  var length = strlen(str);\n  if (len + 1 >= length) {\n    var padlen = len - length;\n    switch (dir) {\n      case 'right':\n        str = repeat(pad, padlen) + str;\n        break;\n\n      case 'center':\n        var right = Math.ceil((padlen) / 2);\n        var left = padlen - right;\n        str = repeat(pad, left) + str + repeat(pad, right);\n        break;\n\n      default :\n        str = str + repeat(pad,padlen);\n        break;\n    }\n  }\n  return str;\n}\n\nvar codeCache = {};\n\nfunction addToCodeCache(name,on,off){\n  on = '\\u001b[' + on + 'm';\n  off = '\\u001b[' + off + 'm';\n  codeCache[on] = {set:name,to:true};\n  codeCache[off] = {set:name,to:false};\n  codeCache[name] = {on:on,off:off};\n}\n\n//https://github.com/Marak/colors.js/blob/master/lib/styles.js\naddToCodeCache('bold', 1, 22);\naddToCodeCache('italics', 3, 23);\naddToCodeCache('underline', 4, 24);\naddToCodeCache('inverse', 7, 27);\naddToCodeCache('strikethrough', 9, 29);\n\n\nfunction updateState(state, controlChars){\n  var controlCode = controlChars[1] ? parseInt(controlChars[1].split(';')[0]) : 0;\n  if ( (controlCode >= 30 && controlCode <= 39)\n     || (controlCode >= 90 && controlCode <= 97)\n  ) {\n    state.lastForegroundAdded = controlChars[0];\n    return;\n  }\n  if ( (controlCode >= 40 && controlCode <= 49)\n     || (controlCode >= 100 && controlCode <= 107)\n  ) {\n    state.lastBackgroundAdded = controlChars[0];\n    return;\n  }\n  if (controlCode === 0) {\n    for (var i in state) {\n      /* istanbul ignore else */\n      if (state.hasOwnProperty(i)) {\n        delete state[i];\n      }\n    }\n    return;\n  }\n  var info = codeCache[controlChars[0]];\n  if (info) {\n    state[info.set] = info.to;\n  }\n}\n\nfunction readState(line){\n  var code = codeRegex(true);\n  var controlChars = code.exec(line);\n  var state = {};\n  while(controlChars !== null){\n    updateState(state, controlChars);\n    controlChars = code.exec(line);\n  }\n  return state;\n}\n\nfunction unwindState(state,ret){\n  var lastBackgroundAdded = state.lastBackgroundAdded;\n  var lastForegroundAdded = state.lastForegroundAdded;\n\n  delete state.lastBackgroundAdded;\n  delete state.lastForegroundAdded;\n\n  _.forEach(state,function(value,key){\n    if(value){\n      ret += codeCache[key].off;\n    }\n  });\n\n  if(lastBackgroundAdded && (lastBackgroundAdded != '\\u001b[49m')){\n    ret += '\\u001b[49m';\n  }\n  if(lastForegroundAdded && (lastForegroundAdded != '\\u001b[39m')){\n    ret += '\\u001b[39m';\n  }\n\n  return ret;\n}\n\nfunction rewindState(state,ret){\n  var lastBackgroundAdded = state.lastBackgroundAdded;\n  var lastForegroundAdded = state.lastForegroundAdded;\n\n  delete state.lastBackgroundAdded;\n  delete state.lastForegroundAdded;\n\n  _.forEach(state,function(value,key){\n    if(value){\n      ret = codeCache[key].on + ret;\n    }\n  });\n\n  if(lastBackgroundAdded && (lastBackgroundAdded != '\\u001b[49m')){\n    ret = lastBackgroundAdded + ret;\n  }\n  if(lastForegroundAdded && (lastForegroundAdded != '\\u001b[39m')){\n    ret = lastForegroundAdded + ret;\n  }\n\n  return ret;\n}\n\nfunction truncateWidth(str, desiredLength){\n  if (str.length === strlen(str)) {\n    return str.substr(0, desiredLength);\n  }\n\n  while (strlen(str) > desiredLength){\n    str = str.slice(0, -1);\n  }\n\n  return str;\n}\n\nfunction truncateWidthWithAnsi(str, desiredLength){\n  var code = codeRegex(true);\n  var split = str.split(codeRegex());\n  var splitIndex = 0;\n  var retLen = 0;\n  var ret = '';\n  var myArray;\n  var state = {};\n\n  while(retLen < desiredLength){\n    myArray = code.exec(str);\n    var toAdd = split[splitIndex];\n    splitIndex++;\n    if (retLen + strlen(toAdd) > desiredLength){\n      toAdd = truncateWidth(toAdd, desiredLength - retLen);\n    }\n    ret += toAdd;\n    retLen += strlen(toAdd);\n\n    if(retLen < desiredLength){\n      if (!myArray) { break; }  // full-width chars may cause a whitespace which cannot be filled\n      ret += myArray[0];\n      updateState(state,myArray);\n    }\n  }\n\n  return unwindState(state,ret);\n}\n\nfunction truncate(str, desiredLength, truncateChar){\n  truncateChar = truncateChar || '…';\n  var lengthOfStr = strlen(str);\n  if(lengthOfStr <= desiredLength){\n    return str;\n  }\n  desiredLength -= strlen(truncateChar);\n\n  ret = truncateWidthWithAnsi(str, desiredLength);\n\n  return ret + truncateChar;\n}\n\n\nfunction defaultOptions(){\n  return{\n    chars: {\n      'top': '─'\n      , 'top-mid': '┬'\n      , 'top-left': '┌'\n      , 'top-right': '┐'\n      , 'bottom': '─'\n      , 'bottom-mid': '┴'\n      , 'bottom-left': '└'\n      , 'bottom-right': '┘'\n      , 'left': '│'\n      , 'left-mid': '├'\n      , 'mid': '─'\n      , 'mid-mid': '┼'\n      , 'right': '│'\n      , 'right-mid': '┤'\n      , 'middle': '│'\n    }\n    , truncate: '…'\n    , colWidths: []\n    , rowHeights: []\n    , colAligns: []\n    , rowAligns: []\n    , style: {\n      'padding-left': 1\n      , 'padding-right': 1\n      , head: ['red']\n      , border: ['grey']\n      , compact : false\n    }\n    , head: []\n  };\n}\n\nfunction mergeOptions(options,defaults){\n  options = options || {};\n  defaults = defaults || defaultOptions();\n  var ret = _.extend({}, defaults, options);\n  ret.chars = _.extend({}, defaults.chars, options.chars);\n  ret.style = _.extend({}, defaults.style, options.style);\n  return ret;\n}\n\nfunction wordWrap(maxLength,input){\n  var lines = [];\n  var split = input.split(/(\\s+)/g);\n  var line = [];\n  var lineLength = 0;\n  var whitespace;\n  for (var i = 0; i < split.length; i += 2) {\n    var word = split[i];\n    var newLength = lineLength + strlen(word);\n    if (lineLength > 0 && whitespace) {\n      newLength += whitespace.length;\n    }\n    if(newLength > maxLength){\n      if(lineLength !== 0){\n        lines.push(line.join(''));\n      }\n      line = [word];\n      lineLength = strlen(word);\n    } else {\n      line.push(whitespace || '', word);\n      lineLength = newLength;\n    }\n    whitespace = split[i+1];\n  }\n  if(lineLength){\n    lines.push(line.join(''));\n  }\n  return lines;\n}\n\nfunction multiLineWordWrap(maxLength, input){\n  var output = [];\n  input = input.split('\\n');\n  for(var i = 0; i < input.length; i++){\n    output.push.apply(output,wordWrap(maxLength,input[i]));\n  }\n  return output;\n}\n\nfunction colorizeLines(input){\n  var state = {};\n  var output = [];\n  for(var i = 0; i < input.length; i++){\n    var line = rewindState(state,input[i]) ;\n    state = readState(line);\n    var temp = _.extend({},state);\n    output.push(unwindState(temp,line));\n  }\n  return output;\n}\n\nmodule.exports = {\n  strlen:strlen,\n  repeat:repeat,\n  pad:pad,\n  truncate:truncate,\n  mergeOptions:mergeOptions,\n  wordWrap:multiLineWordWrap,\n  colorizeLines:colorizeLines\n};\n","/home/travis/build/npmtest/node-npmtest-cli-table2/node_modules/cli-table2/src/layout-manager.js":"var _ = require('lodash');\nvar Cell = require('./cell');\nvar RowSpanCell = Cell.RowSpanCell;\nvar ColSpanCell = Cell.ColSpanCell;\n\n(function(){\n  function layoutTable(table){\n    _.forEach(table,function(row,rowIndex){\n      _.forEach(row,function(cell,columnIndex){\n        cell.y = rowIndex;\n        cell.x = columnIndex;\n        for(var y = rowIndex; y >= 0; y--){\n          var row2 = table[y];\n          var xMax = (y === rowIndex) ? columnIndex : row2.length;\n          for(var x = 0; x < xMax; x++){\n            var cell2 = row2[x];\n            while(cellsConflict(cell,cell2)){\n              cell.x++;\n            }\n          }\n        }\n      });\n    });\n  }\n\n  function maxWidth(table) {\n    var mw = 0;\n    _.forEach(table, function (row) {\n      _.forEach(row, function (cell) {\n        mw = Math.max(mw,cell.x + (cell.colSpan || 1));\n      });\n    });\n    return mw;\n  }\n\n  function maxHeight(table){\n    return table.length;\n  }\n\n  function cellsConflict(cell1,cell2){\n    var yMin1 = cell1.y;\n    var yMax1 = cell1.y - 1 + (cell1.rowSpan || 1);\n    var yMin2 = cell2.y;\n    var yMax2 = cell2.y - 1 + (cell2.rowSpan || 1);\n    var yConflict = !(yMin1 > yMax2 || yMin2 > yMax1);\n\n    var xMin1= cell1.x;\n    var xMax1 = cell1.x - 1 + (cell1.colSpan || 1);\n    var xMin2= cell2.x;\n    var xMax2 = cell2.x - 1 + (cell2.colSpan || 1);\n    var xConflict = !(xMin1 > xMax2 || xMin2 > xMax1);\n\n    return yConflict && xConflict;\n  }\n\n  function conflictExists(rows,x,y){\n    var i_max = Math.min(rows.length-1,y);\n    var cell = {x:x,y:y};\n    for(var i = 0; i <= i_max; i++){\n      var row = rows[i];\n      for(var j = 0; j < row.length; j++){\n        if(cellsConflict(cell,row[j])){\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  function allBlank(rows,y,xMin,xMax){\n    for(var x = xMin; x < xMax; x++){\n      if(conflictExists(rows,x,y)){\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function addRowSpanCells(table){\n    _.forEach(table,function(row,rowIndex){\n      _.forEach(row,function(cell){\n        for(var i = 1; i < cell.rowSpan; i++){\n          var rowSpanCell = new RowSpanCell(cell);\n          rowSpanCell.x = cell.x;\n          rowSpanCell.y = cell.y + i;\n          rowSpanCell.colSpan = cell.colSpan;\n          insertCell(rowSpanCell,table[rowIndex+i]);\n        }\n      });\n    });\n  }\n\n  function addColSpanCells(cellRows){\n    for(var rowIndex = cellRows.length-1; rowIndex >= 0; rowIndex--) {\n      var cellColumns = cellRows[rowIndex];\n      for (var columnIndex = 0; columnIndex < cellColumns.length; columnIndex++) {\n        var cell = cellColumns[columnIndex];\n        for (var k = 1; k < cell.colSpan; k++) {\n          var colSpanCell = new ColSpanCell();\n          colSpanCell.x = cell.x + k;\n          colSpanCell.y = cell.y;\n          cellColumns.splice(columnIndex + 1, 0, colSpanCell);\n        }\n      }\n    }\n  }\n\n  function insertCell(cell,row){\n    var x = 0;\n    while(x < row.length && (row[x].x < cell.x)) {\n      x++;\n    }\n    row.splice(x,0,cell);\n  }\n\n  function fillInTable(table){\n    var h_max = maxHeight(table);\n    var w_max = maxWidth(table);\n    for(var y = 0; y < h_max; y++){\n      for(var x = 0; x < w_max; x++){\n        if(!conflictExists(table,x,y)){\n          var opts = {x:x,y:y,colSpan:1,rowSpan:1};\n          x++;\n          while(x < w_max && !conflictExists(table,x,y)){\n            opts.colSpan++;\n            x++;\n          }\n          var y2 = y + 1;\n          while(y2 < h_max && allBlank(table,y2,opts.x,opts.x+opts.colSpan)){\n            opts.rowSpan++;\n            y2++;\n          }\n\n          var cell = new Cell(opts);\n          cell.x = opts.x;\n          cell.y = opts.y;\n          insertCell(cell,table[y]);\n        }\n      }\n    }\n  }\n\n  function generateCells(rows){\n    return _.map(rows,function(row){\n      if(!_.isArray(row)){\n        var key = Object.keys(row)[0];\n        row = row[key];\n        if(_.isArray(row)){\n          row = row.slice();\n          row.unshift(key);\n        }\n        else {\n          row = [key,row];\n        }\n      }\n      return _.map(row,function(cell){\n        return new Cell(cell);\n      });\n    });\n  }\n\n  function makeTableLayout(rows){\n    var cellRows = generateCells(rows);\n    layoutTable(cellRows);\n    fillInTable(cellRows);\n    addRowSpanCells(cellRows);\n    addColSpanCells(cellRows);\n    return cellRows;\n  }\n\n  module.exports = {\n    makeTableLayout: makeTableLayout,\n    layoutTable: layoutTable,\n    addRowSpanCells: addRowSpanCells,\n    maxWidth:maxWidth,\n    fillInTable:fillInTable,\n    computeWidths:makeComputeWidths('colSpan','desiredWidth','x',1),\n    computeHeights:makeComputeWidths('rowSpan','desiredHeight','y',1)\n  };\n})();\n\nfunction makeComputeWidths(colSpan,desiredWidth,x,forcedMin){\n  return function(vals,table){\n    var result = [];\n    var spanners = [];\n    _.forEach(table,function(row){\n      _.forEach(row,function(cell){\n        if((cell[colSpan] || 1) > 1){\n          spanners.push(cell);\n        }\n        else {\n          result[cell[x]] = Math.max(result[cell[x]] || 0, cell[desiredWidth] || 0, forcedMin);\n        }\n      });\n    });\n\n    _.forEach(vals,function(val,index){\n      if(_.isNumber(val)){\n        result[index] = val;\n      }\n    });\n\n    //_.forEach(spanners,function(cell){\n    for(var k = spanners.length - 1; k >=0; k--){\n      var cell = spanners[k];\n      var span = cell[colSpan];\n      var col = cell[x];\n      var existingWidth = result[col];\n      var editableCols = _.isNumber(vals[col]) ? 0 : 1;\n      for(var i = 1; i < span; i ++){\n        existingWidth += 1 + result[col + i];\n        if(!_.isNumber(vals[col + i])){\n          editableCols++;\n        }\n      }\n      if(cell[desiredWidth] > existingWidth){\n        i = 0;\n        while(editableCols > 0 && cell[desiredWidth] > existingWidth){\n          if(!_.isNumber(vals[col+i])){\n            var dif = Math.round( (cell[desiredWidth] - existingWidth) / editableCols );\n            existingWidth += dif;\n            result[col + i] += dif;\n            editableCols--;\n          }\n          i++;\n        }\n      }\n    }\n\n    _.extend(vals,result);\n    for(var j = 0; j < vals.length; j++){\n      vals[j] = Math.max(forcedMin, vals[j] || 0);\n    }\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-cli-table2/node_modules/cli-table2/src/cell.js":"var _ = require('lodash');\nvar utils = require('./utils');\n\n/**\n * A representation of a cell within the table.\n * Implementations must have `init` and `draw` methods,\n * as well as `colSpan`, `rowSpan`, `desiredHeight` and `desiredWidth` properties.\n * @param options\n * @constructor\n */\nfunction Cell(options){\n  this.setOptions(options);\n}\n\nCell.prototype.setOptions = function(options){\n  if(_.isString(options) || _.isNumber(options) || _.isBoolean(options)){\n    options = {content:''+options};\n  }\n  options = options || {};\n  this.options = options;\n  var content = options.content;\n  if (_.isString(content) || _.isNumber(content) || _.isBoolean(content)) {\n    this.content = String(content);\n  } else if (!content) {\n    this.content = '';\n  } else {\n    throw new Error('Content needs to be a primitive, got: ' + (typeof  content));\n  }\n  this.colSpan = options.colSpan || 1;\n  this.rowSpan = options.rowSpan || 1;\n};\n\nCell.prototype.mergeTableOptions = function(tableOptions,cells){\n  this.cells = cells;\n\n  var optionsChars = this.options.chars || {};\n  var tableChars = tableOptions.chars;\n  var chars = this.chars = {};\n  _.forEach(CHAR_NAMES,function(name){\n     setOption(optionsChars,tableChars,name,chars);\n  });\n\n  this.truncate = this.options.truncate || tableOptions.truncate;\n\n  var style = this.options.style = this.options.style || {};\n  var tableStyle = tableOptions.style;\n  setOption(style, tableStyle, 'padding-left', this);\n  setOption(style, tableStyle, 'padding-right', this);\n  this.head = style.head || tableStyle.head;\n  this.border = style.border || tableStyle.border;\n\n  var fixedWidth = tableOptions.colWidths[this.x];\n  if(tableOptions.wordWrap && fixedWidth){\n    fixedWidth -= this.paddingLeft + this.paddingRight;\n    this.lines = utils.colorizeLines(utils.wordWrap(fixedWidth,this.content));\n  }\n  else {\n    this.lines = utils.colorizeLines(this.content.split('\\n'));\n  }\n\n  this.desiredWidth = utils.strlen(this.content) + this.paddingLeft + this.paddingRight;\n  this.desiredHeight = this.lines.length;\n};\n\n/**\n * Each cell will have it's `x` and `y` values set by the `layout-manager` prior to\n * `init` being called;\n * @type {Number}\n */\n\nCell.prototype.x = null;\nCell.prototype.y = null;\n\n/**\n * Initializes the Cells data structure.\n *\n * @param tableOptions - A fully populated set of tableOptions.\n * In addition to the standard default values, tableOptions must have fully populated the\n * `colWidths` and `rowWidths` arrays. Those arrays must have lengths equal to the number\n * of columns or rows (respectively) in this table, and each array item must be a Number.\n *\n */\nCell.prototype.init = function(tableOptions){\n  var x = this.x;\n  var y = this.y;\n  this.widths = tableOptions.colWidths.slice(x, x + this.colSpan);\n  this.heights = tableOptions.rowHeights.slice(y, y + this.rowSpan);\n  this.width = _.reduce(this.widths,sumPlusOne);\n  this.height = _.reduce(this.heights,sumPlusOne);\n\n  this.hAlign = this.options.hAlign || tableOptions.colAligns[x];\n  this.vAlign = this.options.vAlign || tableOptions.rowAligns[y];\n\n  this.drawRight = x + this.colSpan == tableOptions.colWidths.length;\n};\n\n/**\n * Draws the given line of the cell.\n * This default implementation defers to methods `drawTop`, `drawBottom`, `drawLine` and `drawEmpty`.\n * @param lineNum - can be `top`, `bottom` or a numerical line number.\n * @param spanningCell - will be a number if being called from a RowSpanCell, and will represent how\n * many rows below it's being called from. Otherwise it's undefined.\n * @returns {String} The representation of this line.\n */\nCell.prototype.draw = function(lineNum,spanningCell){\n  if(lineNum == 'top') return this.drawTop(this.drawRight);\n  if(lineNum == 'bottom') return this.drawBottom(this.drawRight);\n  var padLen = Math.max(this.height - this.lines.length, 0);\n  var padTop;\n  switch (this.vAlign){\n    case 'center':\n      padTop = Math.ceil(padLen / 2);\n      break;\n    case 'bottom':\n      padTop = padLen;\n      break;\n    default :\n      padTop = 0;\n  }\n  if( (lineNum < padTop) || (lineNum >= (padTop + this.lines.length))){\n    return this.drawEmpty(this.drawRight,spanningCell);\n  }\n  var forceTruncation = (this.lines.length > this.height) && (lineNum + 1 >= this.height);\n  return this.drawLine(lineNum - padTop, this.drawRight, forceTruncation,spanningCell);\n};\n\n/**\n * Renders the top line of the cell.\n * @param drawRight - true if this method should render the right edge of the cell.\n * @returns {String}\n */\nCell.prototype.drawTop = function(drawRight){\n  var content = [];\n  if(this.cells){  //TODO: cells should always exist - some tests don't fill it in though\n    _.forEach(this.widths,function(width,index){\n      content.push(this._topLeftChar(index));\n      content.push(\n        utils.repeat(this.chars[this.y == 0 ? 'top' : 'mid'],width)\n      );\n    },this);\n  }\n  else {\n    content.push(this._topLeftChar(0));\n    content.push(utils.repeat(this.chars[this.y == 0 ? 'top' : 'mid'],this.width));\n  }\n  if(drawRight){\n    content.push(this.chars[this.y == 0 ? 'topRight' : 'rightMid']);\n  }\n  return this.wrapWithStyleColors('border',content.join(''));\n};\n\nCell.prototype._topLeftChar = function(offset){\n  var x = this.x+offset;\n  var leftChar;\n  if(this.y == 0){\n    leftChar = x == 0 ? 'topLeft' : (offset == 0 ? 'topMid' : 'top');\n  } else  {\n    if(x == 0){\n      leftChar = 'leftMid';\n    }\n    else {\n      leftChar = offset == 0 ? 'midMid' : 'bottomMid';\n      if(this.cells){  //TODO: cells should always exist - some tests don't fill it in though\n        var spanAbove = this.cells[this.y-1][x] instanceof Cell.ColSpanCell;\n        if(spanAbove){\n          leftChar = offset == 0 ? 'topMid' : 'mid';\n        }\n        if(offset == 0){\n          var i = 1;\n          while(this.cells[this.y][x-i] instanceof Cell.ColSpanCell){\n            i++;\n          }\n          if(this.cells[this.y][x-i] instanceof Cell.RowSpanCell){\n            leftChar = 'leftMid';\n          }\n        }\n      }\n    }\n  }\n  return this.chars[leftChar];\n};\n\nCell.prototype.wrapWithStyleColors = function(styleProperty,content){\n  if(this[styleProperty] && this[styleProperty].length){\n    try {\n      var colors = require('colors/safe');\n      for(var i = this[styleProperty].length - 1; i >= 0; i--){\n        colors = colors[this[styleProperty][i]];\n      }\n      return colors(content);\n    } catch (e) {\n      return content;\n    }\n  }\n  else {\n    return content;\n  }\n};\n\n/**\n * Renders a line of text.\n * @param lineNum - Which line of text to render. This is not necessarily the line within the cell.\n * There may be top-padding above the first line of text.\n * @param drawRight - true if this method should render the right edge of the cell.\n * @param forceTruncationSymbol - `true` if the rendered text should end with the truncation symbol even\n * if the text fits. This is used when the cell is vertically truncated. If `false` the text should\n * only include the truncation symbol if the text will not fit horizontally within the cell width.\n * @param spanningCell - a number of if being called from a RowSpanCell. (how many rows below). otherwise undefined.\n * @returns {String}\n */\nCell.prototype.drawLine = function(lineNum,drawRight,forceTruncationSymbol,spanningCell){\n  var left = this.chars[this.x == 0 ? 'left' : 'middle'];\n  if(this.x && spanningCell && this.cells){\n    var cellLeft = this.cells[this.y+spanningCell][this.x-1];\n    while(cellLeft instanceof ColSpanCell){\n      cellLeft = this.cells[cellLeft.y][cellLeft.x-1];\n    }\n    if(!(cellLeft instanceof RowSpanCell)){\n      left = this.chars['rightMid'];\n    }\n  }\n  var leftPadding = utils.repeat(' ', this.paddingLeft);\n  var right = (drawRight ? this.chars['right'] : '');\n  var rightPadding = utils.repeat(' ', this.paddingRight);\n  var line = this.lines[lineNum];\n  var len = this.width - (this.paddingLeft + this.paddingRight);\n  if(forceTruncationSymbol) line += this.truncate || '…';\n  var content = utils.truncate(line,len,this.truncate);\n  content = utils.pad(content, len, ' ', this.hAlign);\n  content = leftPadding + content + rightPadding;\n  return this.stylizeLine(left,content,right);\n};\n\nCell.prototype.stylizeLine = function(left,content,right){\n  left = this.wrapWithStyleColors('border',left);\n  right = this.wrapWithStyleColors('border',right);\n  if(this.y === 0){\n    content = this.wrapWithStyleColors('head',content);\n  }\n  return left + content + right;\n};\n\n/**\n * Renders the bottom line of the cell.\n * @param drawRight - true if this method should render the right edge of the cell.\n * @returns {String}\n */\nCell.prototype.drawBottom = function(drawRight){\n  var left = this.chars[this.x == 0 ? 'bottomLeft' : 'bottomMid'];\n  var content = utils.repeat(this.chars.bottom,this.width);\n  var right = drawRight ? this.chars['bottomRight'] : '';\n  return this.wrapWithStyleColors('border',left + content + right);\n};\n\n/**\n * Renders a blank line of text within the cell. Used for top and/or bottom padding.\n * @param drawRight - true if this method should render the right edge of the cell.\n * @param spanningCell - a number of if being called from a RowSpanCell. (how many rows below). otherwise undefined.\n * @returns {String}\n */\nCell.prototype.drawEmpty = function(drawRight,spanningCell){\n  var left = this.chars[this.x == 0 ? 'left' : 'middle'];\n  if(this.x && spanningCell && this.cells){\n    var cellLeft = this.cells[this.y+spanningCell][this.x-1];\n    while(cellLeft instanceof ColSpanCell){\n      cellLeft = this.cells[cellLeft.y][cellLeft.x-1];\n    }\n    if(!(cellLeft instanceof RowSpanCell)){\n      left = this.chars['rightMid'];\n    }\n  }\n  var right = (drawRight ? this.chars['right'] : '');\n  var content = utils.repeat(' ',this.width);\n  return this.stylizeLine(left , content , right);\n};\n\n/**\n * A Cell that doesn't do anything. It just draws empty lines.\n * Used as a placeholder in column spanning.\n * @constructor\n */\nfunction ColSpanCell(){}\n\nColSpanCell.prototype.draw = function(){\n  return '';\n};\n\nColSpanCell.prototype.init = function(tableOptions){};\n\n\n/**\n * A placeholder Cell for a Cell that spans multiple rows.\n * It delegates rendering to the original cell, but adds the appropriate offset.\n * @param originalCell\n * @constructor\n */\nfunction RowSpanCell(originalCell){\n  this.originalCell = originalCell;\n}\n\nRowSpanCell.prototype.init = function(tableOptions){\n  var y = this.y;\n  var originalY = this.originalCell.y;\n  this.cellOffset = y - originalY;\n  this.offset = findDimension(tableOptions.rowHeights,originalY,this.cellOffset);\n};\n\nRowSpanCell.prototype.draw = function(lineNum){\n  if(lineNum == 'top'){\n    return this.originalCell.draw(this.offset,this.cellOffset);\n  }\n  if(lineNum == 'bottom'){\n    return this.originalCell.draw('bottom');\n  }\n  return this.originalCell.draw(this.offset + 1 + lineNum);\n};\n\nColSpanCell.prototype.mergeTableOptions =\nRowSpanCell.prototype.mergeTableOptions = function(){};\n\n// HELPER FUNCTIONS\nfunction setOption(objA,objB,nameB,targetObj){\n  var nameA = nameB.split('-');\n  if(nameA.length > 1) {\n    nameA[1] = nameA[1].charAt(0).toUpperCase() + nameA[1].substr(1);\n    nameA = nameA.join('');\n    targetObj[nameA] = objA[nameA] || objA[nameB] || objB[nameA] || objB[nameB];\n  }\n  else {\n    targetObj[nameB] = objA[nameB] || objB[nameB];\n  }\n}\n\nfunction findDimension(dimensionTable, startingIndex, span){\n  var ret = dimensionTable[startingIndex];\n  for(var i = 1; i < span; i++){\n    ret += 1 + dimensionTable[startingIndex + i];\n  }\n  return ret;\n}\n\nfunction sumPlusOne(a,b){\n  return a+b+1;\n}\n\nvar CHAR_NAMES = [  'top'\n  , 'top-mid'\n  , 'top-left'\n  , 'top-right'\n  , 'bottom'\n  , 'bottom-mid'\n  , 'bottom-left'\n  , 'bottom-right'\n  , 'left'\n  , 'left-mid'\n  , 'mid'\n  , 'mid-mid'\n  , 'right'\n  , 'right-mid'\n  , 'middle'\n];\nmodule.exports = Cell;\nmodule.exports.ColSpanCell = ColSpanCell;\nmodule.exports.RowSpanCell = RowSpanCell;","/home/travis/build/npmtest/node-npmtest-cli-table2/node_modules/cli-table2/gulpfile.js":"var gulp = require('gulp');\nvar gutil = require('gulp-util');\nvar mocha = require('gulp-mocha');\nvar istanbul = require('gulp-istanbul');\nvar printExample = require('./lib/print-example');\nvar _ = require('lodash');\n\ngulp.task('test',mochaTask);\ngulp.task('coverage',coverage());\ngulp.task('coverage-api',coverage({grep:'@api'}));\n\ngulp.task('watch-test',function(){\n  gulp.watch(['test/**','src/**','examples/**'],['test']);\n  mochaTask();\n});\n\ngulp.task('example',function(){\n  printExample.logExample(require('./examples/basic-usage-examples'));\n  printExample.logExample(require('./examples/col-and-row-span-examples'));\n});\n\n/**\n * Do NOT run this in the same commit when you are adding images.\n * Commit the images, then run this.\n */\ngulp.task('example-md',['example-md-basic','example-md-advanced']);\ngulp.task('example-md-basic',function(cb){\n  printExample.mdExample(require('./examples/basic-usage-examples'),'basic-usage.md',cb);\n});\ngulp.task('example-md-advanced',function(cb){\n  printExample.mdExample(require('./examples/col-and-row-span-examples'),'advanced-usage.md',cb);\n});\n\nfunction coverage(opts){\n  opts = opts || {};\n\n  function coverageTask(cb){\n    gulp.src(['src/*.js'])\n      .pipe(istanbul()) // Covering files\n      .pipe(istanbul.hookRequire()) // Force `require` to return covered files\n      .on('error', logMochaError)\n      .on('finish', function () {\n        gulp.src(['test/*.js'])\n          .pipe(mocha(opts))\n          .on('error',function(err){\n            logMochaError(err);\n            if(cb) cb(err);\n          })\n          .pipe(istanbul.writeReports()) // Creating the reports after tests run\n          .on('end', function(){\n            if(cb) cb();\n          });\n      });\n  }\n\n  return coverageTask;\n}\n\nfunction mochaTask(){\n  return gulp.src(['test/*.js'],{read:false})\n    .pipe(mocha({\n      growl:true\n    }))\n    .on('error',logMochaError);\n}\n\nfunction logMochaError(err){\n  if(err && err.message){\n    gutil.log(err.message);\n  } else {\n    gutil.log.apply(gutil,arguments);\n  }\n}"}